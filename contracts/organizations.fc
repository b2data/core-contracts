#include "imports/stdlib.fc";
#include "imports/utils.fc";

const op::create = "op::create"c;   ;; 0x15cf00af
const op::remove = "op::remove"c;   ;; 0xf299fd64
const op::change = "op::change"c;   ;; 0xda4e1e74
const op::rename = "op::rename"c;   ;; 0x4384b41a


;; contract_dict = { accountId, contract_address }
;; owner_dict     = { accountId, owner_address }
;; site_dict      = { accountId, ANDL } 
(cell, cell, cell) load_data() impure {
  slice ds = get_data().begin_parse();
  if (ds.slice_bits() < 2) {
    return (new_dict(), new_dict(), new_dict());
  } else {
    return (ds~load_dict(), ds~load_dict(), ds~load_dict());
  }
}

() save_data(cell contract_dict, cell owners_dict, cell site_dict) impure {
  set_data(
    begin_cell()
      .store_dict(contract_dict)
      .store_dict(owners_dict)
      .store_dict(site_dict)
      .end_cell()
  );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) {
    return ();
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  if (flags & 1) {
    return ();
  }

  (cell contract_dict, cell owners_dict, cell site_dict) = load_data();

  slice sender_address = cs~load_msg_addr();
  int op = in_msg_body~load_uint(32);

  slice contract_address = in_msg_body~load_ref().begin_parse();
  int contract = address::get_hashpart(contract_address);

  (slice owner_address, int success) = owners_dict.udict_get?(256, contract);


  if (op == op::create) {
    throw_if(400, success == -1);

    slice site = in_msg_body~load_ref().begin_parse();

    contract_dict~udict_set(256, contract, contract_address);
    owners_dict~udict_set(256, contract, sender_address);
    site_dict~udict_set(256, contract, site);

    save_data(contract_dict, owners_dict, site_dict);
    return ();
  }

  if (op == op::remove) {
    throw_if(404, success == 0);
    throw_if(403, ~ equal_slices(owner_address, sender_address));

    contract_dict~udict_delete?(256, contract);
    owners_dict~udict_delete?(256, contract);
    site_dict~udict_delete?(256, contract);

    save_data(contract_dict, owners_dict, site_dict);
    return ();
  }

  if (op == op::change) {
    throw_if(404, success == 0);
    throw_if(403, ~ equal_slices(owner_address, sender_address));

    slice new_owner_address = in_msg_body~load_ref().begin_parse();
    owners_dict~udict_set(256, contract, new_owner_address);

    save_data(contract_dict, owners_dict, site_dict);
    return ();
  }

  if (op == op::rename) {
    throw_if(404, success == 0);
    throw_if(403, ~ equal_slices(owner_address, sender_address));

    slice site = in_msg_body~load_ref().begin_parse();

    site_dict~udict_set(256, contract, site);

    save_data(contract_dict, owners_dict, site_dict);
    return ();
  }

  throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

int get_total() method_id {
  (cell contract_dict, _, _) = load_data();
  int total = 0;
  int key = -1;

  do {
    (key, slice cs, int f) = contract_dict.udict_get_next?(256, key);
    if (f) {
      total += 1;
    }
  } until (~ f);

  return total;
}

slice get_contract_address(int key) method_id {
  (cell contract_dict, _, _) = load_data();
  (slice contract_address, int success) = contract_dict.udict_get?(256, key);
  return contract_address;
}

slice get_owner(int key) method_id {
  (_, cell owners_dict, _) = load_data();
  (slice owner_address, int success) = owners_dict.udict_get?(256, key);
  return owner_address;
}

slice get_contract_owner(cell in_msg) method_id {
  slice contract_address = in_msg.begin_parse();
  int contract = address::get_hashpart(contract_address);

  (_, cell owners_dict, _) = load_data();
  (slice owner_address, int success) = owners_dict.udict_get?(256, contract);
  return owner_address;
}

slice get_site(int key) method_id {
  (_, _, cell site_dict) = load_data();
  (slice site, int success) = site_dict.udict_get?(256, key);
  return site;
}

slice get_contract_site(cell in_msg) method_id {
  slice contract_address = in_msg.begin_parse();
  int contract = address::get_hashpart(contract_address);

  (_, _, cell site_dict) = load_data();
  (slice site, int success) = site_dict.udict_get?(256, contract);
  return site;
}
