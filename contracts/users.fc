#include "imports/stdlib.fc";
#include "imports/utils.fc";

const op::invite = "invite"c;   ;; 0xc7e210d7
const op::exclude = "exclude"c; ;; 0x6282e779

;; user_dict    { walletHash: address->address->address->... }
(cell) load_data() impure {
  slice ds = get_data().begin_parse();
  if (ds.slice_bits() == 0) {
    return (new_dict());
  } else {
    return (ds~load_dict());
  }
}

() save_data(cell user_dict) impure {
  set_data(
    begin_cell()
      .store_dict(user_dict)
      .end_cell()
  );
}

(tuple, int) load_organization(cell current, slice newAddress) impure {
  tuple result = empty_tuple();
  int hasError = -1;
  if (is_null(current)) {
    return (result, -1);
  }
  repeat(current.cell_depth()) {
    slice currentSlice = current.begin_parse();
    (slice address, _) = currentSlice.load_ref();
    (_, cell cs) = currentSlice.load_ref();
    hasError = hasError == 0 ? 0 : ~ equal_slices(address, newAddress);
    result~tpush(address);
    current = cs;
  }
  return (result, hasError);
}

cell convert_storage (tuple list, cell result) impure {
  if (tuple_length(list)) {
    slice address = list~tpop();
    cell newResult = begin_cell()
      .store_slice(address)
      .store_ref(result)
      .end_cell();
    return convert_storage(list, newResult);
  }
  return result;
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) {
    return ();
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  if (flags & 1) {
    return ();
  }

  (cell user_dict) = load_data();

  slice sender_address = cs~load_msg_addr();
  int op = in_msg_body~load_uint(32);

  slice address = in_msg_body~load_ref().begin_parse();
  slice wallet = in_msg_body~load_ref().begin_parse();
  int walletHash = address::get_hashpart(wallet);

  throw_if(4000, equal_slices(wallet, address));

  (cell srorage, int success) = user_dict.udict_get_ref?(256, walletHash);

  if (op == op::invite) {
    (tuple organizations, int duplicate) = load_organization(srorage, address);
    throw_if(4001, duplicate == 0);

    organizations~tpush(address);

    cell newStorage = convert_storage(organizations, begin_cell().end_cell());
    user_dict~udict_set_ref(256, walletHash, newStorage);

    save_data(user_dict);
    return ();
  }

  if (op == op::exclude) {
    throw_if(404, success == 0);

    (tuple organizations, int duplicate) = load_organization(srorage, address);
    throw_if(4002, duplicate == -1);

    tuple newOrganizations = empty_tuple();

    repeat(tuple_length(organizations)) {
      slice item = organizations~tpop();
      if (~ equal_slices(item, address)) {
        newOrganizations~tpush(item);
      }
    }

    cell newStorage = convert_storage(newOrganizations, begin_cell().end_cell());
    user_dict~udict_set_ref(256, walletHash, newStorage);

    save_data(user_dict);
    return ();
  }

  throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

tuple get_organizations(slice wallet) method_id {
  tuple result = empty_tuple();
  int walletHash = address::get_hashpart(wallet);

  (cell user_dict) = load_data();
  (cell storage, int success) = user_dict.udict_get_ref?(256, walletHash);
  cell current = storage;

  if (success == 0) {
    return result;
  }

  repeat(storage.cell_depth()) {
    slice currentSlice = current.begin_parse();
    (slice address, _) = currentSlice.load_ref();
    (_, cell cs) = currentSlice.load_ref();
    result~tpush(address);
    current = cs;
  }

  return result;
}
